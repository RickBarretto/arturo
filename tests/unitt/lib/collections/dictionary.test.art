import {unitt}!

suite "storage and access" [

    suite "simple dictionary" [
        person: #[
            name: "John"
            surname: "Doe"
            age: 35
        ]

        test "should store all fields" [
            actualName: person\name
            assert -> "John" = actualName

            actualSurname: person\surname
            assert -> "Doe" = actualSurname

            actualAge: person\age
            assert -> 35 = actualAge
        ]
    ]

    suite "nested dictionary" [
        resident: #[
            fullname: "John Doe"
            location: #[
                country: "Brazil"
                city: "São Paulo"
            ]
        ]

        test "should access 1-depth values" [
            expectedLocation: #[country: "Brazil" city: "São Paulo"]

            actualFullname: resident\fullname
            assert -> "John Doe" = actualFullname

            actualLocation: resident\location
            assert -> expectedLocation = actualLocation
        ]

        test "should access n-depth values" [
            actualCity: resident\location\city
            assert -> "São Paulo" = actualCity

            actualCountry: resident\location\country
            assert -> "Brazil" = actualCountry
        ]

    ]
]

suite "scope and evaluation" [

    test "should read out-of-scope variables" [
        country: "Spain"    ; out-of-scope variable

        resident: #[
            fullname: "John Doe"
            country: country
            city: "Madrid"
        ]

        actual: resident\country
        assert -> country = actual
    ]

    test "should not alter outside values with same label" [
        country: "Spain"
        entity: "EU"

        location: #[
            continent: "Europe"
            country: "Greece"
            entity: entity
        ]

        assert -> "EU" = entity
        assert -> "Spain" = country
        
        actual: location\country
        assert -> "Greece" = actual
    ]

    test "should evaluate functions" [
        adding: $=> add
        calculator: #[
            result: adding 1 2
        ]

        actual: calculator\result
        assert -> 3 = actual
    ]

]